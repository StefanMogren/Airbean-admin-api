info:
  description: API Documentation for Airbean API
  title: Airbean API
  version: 1.0.0
openapi: 3.0.1
components:
  # --------------- Schemas ---------------
  schemas:
    # ----- UserLogin -----
    UserLogin:
      type: object
      description: Login credentials
      properties:
        username:
          type: string
          description: Name of user
          example: coffeedrinker
        password:
          type: string
          description: Password for logging in
          example: oh39gu74wb(7

    # ----- UserRegister -----
    UserRegister:
      type: object
      description: Registration credentials
      properties:
        username:
          type: string
          description: Name of user
          example: coffeedrinker
        password:
          type: string
          description: Password for logging in
          example: oh39gu74wb(7
        role:
          type: string
          description: User or admin
          example: user

    # ----- ProdId -----
    ProdId:
      type: string
      description: Product ID
      example: prod-5a571

    # ----- UserId -----
    UserId:
      type: string
      description: User ID
      example: user-g98g3

    # ----- CartId -----
    CartId:
      type: string
      description: User ID
      example: cart-fib85

    # ----- Token -----
    Token:
      type: string
      description: JWT token
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyLTk1MTJiIiwiaWF0IjoxNzQ5NTQyMDQ4LCJleHAiOjE3NDk1NDU2NDh9.DQEqXRptP3taed_4nXC-QIfSEJplreducw0Pj247cNg

    # ----- Product -----
    Product:
      type: object
      description: Product information
      properties:
        title:
          type: string
          description: The name of the product
          example: Dubbel latte
        desc:
          type: string
          description: A description of the product
          example: Bryggd på månadens böna
        price:
          type: number
          description: How much the product costs
          example: 39

    # ----- UpdateCart -----
    UpdateCart:
      type: object
      description: Update cart with product
      properties:
        prodId:
          type: string
          description: ID for the product
          example: prod-jespe
        qty:
          type: number
          description: Number of items
          example: 5

  # --------------- RequestBody ---------------
  requestBody:
    Product:
      application/json:
        schema:
          type: object
          properties:
            success:
              type: boolean
              example: true
            orders:
              type: object
              example:
                {
                  title: Dubbel latte,
                  desc: Bryggd på månadens böna,
                  price: 39,
                }
    UserLogin:
      application/json:
        schema:
          type: object
          properties:
            success:
              type: boolean
              example: true
            orders:
              type: object
              example: { username: coffeedrinker, password: oh39gu74wb(7 }
    UserRegister:
      application/json:
        schema:
          type: object
          properties:
            success:
              type: boolean
              example: true
            orders:
              type: object
              example:
                { username: coffeedrinker, password: oh39gu74wb(7, role: user }

    UpdateCart:
      application/json:
        schema:
          type: object
          properties:
            success:
              type: boolean
              example: true
            orders:
              type: object
              example: { prodId: prod-jespe, qty: 5 }

  # --------------- Responses ---------------
  responses:
    # ----- Product -----
    Cart:
      type: object
      description: A cart with content
      example:
        {
          "cartId": "cart-d107b",
          "userId": "user-9512b",
          "guestId": null,
          "items":
            [
              {
                "prodId": "prod-jespe",
                "qty": 5,
                "title": "Bryggkaffe",
                "price": 39,
              },
            ],
          "total": 140.4,
          "discountsApplied":
            [
              "Active Discount: Buy 4 pay for 3, cheapest one is free.",
              "Active Discount: 10% discount for registered users.",
            ],
          "registeredUser": true,
          "createdAt": "2025-06-10T11:07:47.627Z",
          "updatedAt": "2025-06-10T11:14:57.408Z",
        }

    Carts:
      application/json:
        schema:
          type: object
          properties:
            success:
              type: boolean
              example: true
            cart:
              type: array
              example:
                [
                  {
                    "userId": "user-a15f8",
                    "guestId": null,
                    "items": [{ "prodId": "prod-hebes", "qty": 5 }],
                    "cartId": "cart-d2276",
                    "createdAt": "2025-06-08T11:44:02.479Z",
                    "updatedAt": "2025-06-08T11:44:02.498Z",
                  },
                  {
                    "userId": "user-9512b",
                    "guestId": null,
                    "items":
                      [
                        { "prodId": "prod-rgist", "qty": 2 },
                        { "prodId": "prod-jespe", "qty": 3 },
                      ],
                    "cartId": "cart-d107b",
                    "createdAt": "2025-06-10T11:07:47.627Z",
                    "updatedAt": "2025-06-10T11:08:13.478Z",
                  },
                ]
    Order:
      type: object
      example:
        {
          "userId": "user-9512b",
          "items":
            [
              {
                "prodId": "prod-jespe",
                "title": "Bryggkaffe",
                "price": 39,
                "qty": 5,
                "_id": "68481b5bf77dc4d1c1274ed3",
              },
            ],
          "total": 140.4,
          "discountsApplied":
            [
              "Active Discount: Buy 4 pay for 3, cheapest one is free.",
              "Active Discount: 10% discount for registered users.",
            ],
          "_id": "68481b5bf77dc4d1c1274ed2",
          "__v": 0,
        }

    Orders:
      application/json:
        schema:
          type: object
          properties:
            success:
              type: boolean
              example: true
            orders:
              type: array
              example:
                [
                  {
                    "_id": "68481b5bf77dc4d1c1274ed2",
                    "userId": "user-9512b",
                    "items":
                      [
                        {
                          "prodId": "prod-jespe",
                          "title": "Bryggkaffe",
                          "price": 39,
                          "qty": 5,
                          "_id": "68481b5bf77dc4d1c1274ed3",
                        },
                      ],
                    "total": 140.4,
                    "discountsApplied":
                      [
                        "Active Discount: Buy 4 pay for 3, cheapest one is free.",
                        "Active Discount: 10% discount for registered users.",
                      ],
                    "__v": 0,
                  },
                  {
                    "_id": "68481db227220a71ac8a060d",
                    "userId": "user-9512b",
                    "items":
                      [
                        {
                          "prodId": "prod-jespe",
                          "title": "Bryggkaffe",
                          "price": 39,
                          "qty": 3,
                          "_id": "68481db227220a71ac8a060e",
                        },
                      ],
                    "total": 105.3,
                    "discountsApplied":
                      ["Active Discount: 10% discount for registered users."],
                    "__v": 0,
                  },
                ]

    # ----- OrdersResponse -----
    OrdersResponse:
      description: Return all orders
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              orders:
                type: array
                description: Array of orders
                example:
                  [
                    {
                      "_id": "6845775f260e6e4f43e8a19a",
                      "userId": "user-a15f8",
                      "items":
                        [
                          {
                            "prodId": "prod-rgist",
                            "title": "Cappuccino",
                            "price": 49,
                            "qty": 4,
                            "_id": "6845775f260e6e4f43e8a19b",
                          },
                          {
                            "prodId": "prod-hebes",
                            "title": "Latte Macchiato",
                            "price": 49,
                            "qty": 2,
                            "_id": "6845775f260e6e4f43e8a19c",
                          },
                        ],
                      "total": 220.5,
                      "discountsApplied":
                        [
                          "Active Discount: Buy 4 pay for 3, cheapest one is free.",
                          "Active Discount: 10% discount for registered users.",
                        ],
                      "__v": 0,
                    },
                    {
                      "_id": "684595be5bebcaf40e6cac16",
                      "userId": "user-6d24a",
                      "items":
                        [
                          {
                            "prodId": "prod-hebes",
                            "title": "Latte Macchiato",
                            "price": 49,
                            "qty": 6,
                            "_id": "684595be5bebcaf40e6cac17",
                          },
                          {
                            "prodId": "prod-jespe",
                            "title": "Bryggkaffe",
                            "price": 39,
                            "qty": 2,
                            "_id": "684595be5bebcaf40e6cac18",
                          },
                          {
                            "prodId": "prod-22ddd",
                            "title": "Real Grey Tea",
                            "price": 27,
                            "qty": 3,
                            "_id": "684595be5bebcaf40e6cac19",
                          },
                        ],
                      "total": 328.5,
                      "discountsApplied":
                        [
                          "Active Discount: Buy 4 pay for 3, cheapest one is free.",
                          "Active Discount: 10% discount for registered users.",
                        ],
                      "__v": 0,
                    },
                  ]

# -------------------- Paths --------------------
# -------------------- Paths --------------------
# -------------------- Paths --------------------
paths:
  # --------------- Menu ---------------
  /api/menu:
    get: # ----- GET menu items -----
      tags:
        - Menu
      description: Returns a menu of items
      responses:
        "200":
          description: Returns the menu with all items
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  menu:
                    type: array
                    example:
                      [
                        {
                          prodId: prod-jespe,
                          title: Bryggkaffe,
                          desc: Bryggd på månadens bönor.,
                          price: 39,
                        },
                        {
                          prodId: prod-rnybe,
                          title: Caffè Doppio,
                          desc: Bryggd på månadens bönor.,
                          price: 49,
                        },
                        {
                          prodId: prod-rgist,
                          title: Cappuccino,
                          desc: Bryggd på månadens bönor.,
                          price: 49,
                        },
                      ]
        "404":
          description: Failed to find menu
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Could not find any menu

    post: # ----- POST add new menu item -----
      tags:
        - Menu
      description: Adds a new item to the menu
      parameters:
        - in: headers
          name: token
          required: true
          schema:
            $ref: "#/components/schemas/Token"
      requestBody:
        required: true
        content:
          $ref: "#/components/requestBody/Product"
      responses:
        "201":
          description: Confirmation on adding new item
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Successfully added new menu item
        "400":
          description: Bad request - multiple scenarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

              examples:
                titleDescPrice:
                  summary: Missing title, desc, or price
                  value:
                    success: false
                    message: Both title, desc, and price are required
                menuItemExists:
                  summary: Menu item already exists
                  value:
                    success: false
                    message: Menu item already exists
                failedToAdd:
                  summary: Failed to add menu item
                  value:
                    success: false
                    message: Failed to add new menu item
                noToken:
                  summary: No token provided
                  value:
                    success: false
                    message: No token provided
                invalidToken:
                  summary: Invalid or expired token
                  value:
                    success: false
                    message: Invalid or expired token
        "401":
          description: Unauthorized action
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Action not allowed as user or guest

  /api/menu/{prodId}:
    put: # ----- PUT update menu item -----
      tags:
        - Menu
      description: Updates an existing item in the menu
      parameters:
        - in: headers
          name: token
          required: true
          schema:
            $ref: "#/components/schemas/Token"
        - in: path
          name: prodId
          required: true
          schema:
            $ref: "#/components/schemas/ProdId"
      requestBody:
        required: true
        content:
          $ref: "#/components/requestBody/Product"
      responses:
        "200":
          description: Confirmation on editing menu item
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Successfully edited item
        "400":
          description: Bad request - multiple scenarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

              examples:
                titleDescPrice:
                  summary: Missing title, desc, or price
                  value:
                    success: false
                    message: Both title, desc, and price are required
                noMenuItem:
                  summary: No item with prodId found
                  value:
                    success: false
                    message: No item with prodId found
                failedToAdd:
                  summary: Failed to add menu item
                  value:
                    success: false
                    message: Failed to add new menu item
                noToken:
                  summary: No token provided
                  value:
                    success: false
                    message: No token provided
                invalidToken:
                  summary: Invalid or expired token
                  value:
                    success: false
                    message: Invalid or expired token
        "401":
          description: Unauthorized action
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Action not allowed as user or guest

    delete: # ----- DELETE menu item -----
      tags:
        - Menu
      description: Removes an item from the menu
      parameters:
        - in: headers
          name: token
          required: true
          schema:
            $ref: "#/components/schemas/Token"
        - in: path
          name: prodId
          required: true
          schema:
            $ref: "#/components/schemas/ProdId"
      responses:
        "200":
          description: Confirmation on deleting menu item
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Successfully deleted item
          "400":
            description: Bad request - multiple scenarios
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                    message:
                      type: string
                examples:
                  noMenuItem:
                    summary: No item with prodId found
                    value:
                      success: false
                      message: No item with prodId found
                  noToken:
                    summary: No token provided
                    value:
                      success: false
                      message: No token provided
                  invalidToken:
                    summary: Invalid or expired token
                    value:
                      success: false
                      message: Invalid or expired token
        "401":
          description: Unauthorized action
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Action not allowed as user or guest

  # --------------- Auth ---------------
  /api/auth/logout:
    get: # ----- GET logout user -----
      tags:
        - Auth
      description: Logs out the user
      responses:
        "200":
          description: Logging out user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User logged out
        "400":
          description: No user to log out
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No user to log out

  /api/auth/register:
    post: # ----- POST register new user -----
      tags:
        - Auth
      description:
      requestBody:
        required: true
        content:
          $ref: "#/components/requestBody/UserRegister"
      responses:
        "201":
          description: Register new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User created successfully
        "400":
          description: Bad request - multiple scenarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              examples:
                shortPassword:
                  summary: Too short password
                  value:
                    success: false
                    message: Password must be 8 characters or longer
                shortUsername:
                  summary: Too short username
                  value:
                    success: false
                    message: Username must be 6 characters or longer
                missingInput:
                  summary: Username, password, role
                  value:
                    success: false
                    message: Both username, password, AND role are required
                userAlreadyExist:
                  summary: Username already exists
                  value:
                    success: false
                    message: Username already exists
                userOrAdmin:
                  summary: User or admin
                  value:
                    success: false
                    message: Role must be either user or admin
        "500":
          description: Registration unsuccessful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Registration unsuccessful

  /api/auth/login:
    post: # ----- POST login user -----
      tags:
        - Auth
      description: Logs in the user
      requestBody:
        required: true
        content:
          $ref: "#/components/requestBody/UserLogin"
      responses:
        "200":
          description: Logging in user
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User logged in Successfully
                    token: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyLTk1MTJiIiwiaWF0IjoxNzQ5NTQyMDQ4LCJleHAiOjE3NDk1NDU2NDh9.DQEqXRptP3taed_4nXC-QIfSEJplreducw0Pj247cNg
        "400":
          description: Bad request - multiple scenarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              examples:
                usernameOrPassword:
                  summary: Incorrect username or pasword
                  value:
                    success: false
                    message: Username and/or password are incorrect
                alreadyLoggedIn:
                  summary: User is already logged in
                  value:
                    success: false
                    message: User is already logged in

  # --------------- Cart ---------------
  /api/cart:
    get: # ----- GET carts -----
      tags:
        - Cart
      description: Gets all currently filled carts
      responses:
        "200":
          description: Returns all carts
          content:
            $ref: "#/components/responses/Carts"

        "500":
          description: Failed to fetch carts
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Failed to fetch carts

    put: # ----- PUT update cart -----
      tags:
        - Cart
      description: Lets user update the content of their cart
      requestBody:
        required: true
        content:
          $ref: "#/components/requestBody/UpdateCart"
      responses:
        "200":
          description: Updating cart with an item
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  cart:
                    $ref: "#/components/responses/Cart"
        "400":
          description: Bad request - multiple scenarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              examples:
                quantityNumber:
                  summary: Quantity must be a number
                  value:
                    success: false
                    message: Quantity must be a number
                noMenuItem:
                  summary: No item with prodId found
                  value:
                    success: false
                    message: No item with prodId found

  /api/cart/{cartId}:
    get: # ----- GET cart by cartId -----
      tags:
        - Cart
      description: Gets a cart by its cartId
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            $ref: "#/components/schemas/CartId"
      responses:
        "200":
          description: Get a cart by cartId
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  cart:
                    $ref: "#/components/responses/Cart"
        "404":
          description: No cart with cartId
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No cart found with cartId

  # --------------- Orders ---------------
  /api/orders:
    get: # ----- GET orders -----
      tags:
        - Orders
      description: Gets all current orders
      responses:
        "200":
          $ref: "#/components/responses/OrdersResponse"
        "404":
          description: No orders found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No orders found

    post: # ----- POST create order -----
      tags:
        - Orders
      description: Lets user create an order with the content of their cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: { cartId: cart-fib85 }
      responses:
        "201":
          description: Confirmation on creating an order
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Successfully created order
                  order:
                    $ref: "#/components/responses/Order"
        "400":
          description: Bad request - multiple scenarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              examples:
                cartEmpty:
                  summary: Cart must contain item
                  value:
                    success: false
                    message: Cart must contain an item before placing an order
                invalidCartId:
                  summary: CartId doesn't match any cart
                  value:
                    success: false
                    message: CartId doesn't match any cart
        "403":
          description: Forbidden - multiple scenarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              examples:
                userNotLoggedIn:
                  summary: User must be logged in
                  value:
                    success: false
                    message: User must be logged in before order can be made
                orderForAnotherUser:
                  summary: Can't create order for another user
                  value:
                    success: false
                    message: Can't create order for another user
                orderForGuest:
                  summary: User can't create order for guest
                  value:
                    success: false
                    message: User can't create order for guest

  /api/orders/{userId}:
    get: # ----- GET orders by userId -----
      tags:
        - Orders
      description: Get all orders based on userId
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            $ref: "#/components/schemas/UserId"
      responses:
        "200":
          description: Get all orders by userId
          content:
            $ref: "#/components/responses/Orders"
        "204":
          description: No orders found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: No orders found for userId
        "400":
          description: Invalid userId provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Invalid userId provided
