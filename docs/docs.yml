info:
  description: API Documentation for Airbean API
  title: Airbean API
  version: 1.0.0
openapi: 3.0.1
components:
  # --------------- Schemas ---------------
  schemas:
    # ----- ProdId -----
    ProdId:
      type: string
      description: product ID
      example: prod-5a571

    # ----- Token -----
    Token:
      type: string
      description: JWT token
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJ1c2VyLTk1MTJiIiwiaWF0IjoxNzQ5NTQyMDQ4LCJleHAiOjE3NDk1NDU2NDh9.DQEqXRptP3taed_4nXC-QIfSEJplreducw0Pj247cNg

    # ----- Product -----
    Product:
      type: object
      description: Product description
      example: { title: Dubbel latte, desc: Bryggd på månadens böna, price: 39 }

  # --------------- Responses ---------------
  responses:
    BadRequestError:

    # ----- MissingBodyError -----
    MissingBodyError:
      description: Missing request body
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Missing request body

    # ----- ProdIdError -----
    ProdIdError:
      description: No item with prodId found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: No item with prodId found

    # ----- TitleDescPriceError -----
    TitleDescPriceError:
      description: Missing body content
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Both title, desc, and price are required

    # ----- TokenError -----
    TokenError:
      description: Invalid or expired token
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Invalid or expired token

paths:
  # --------------- Menu ---------------
  /api/menu:
    # ----- GET menu items -----
    get:
      tags:
        - Menu
      description: Returns a menu of items
      responses:
        "200":
          description: Returns a menu of items
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  menu:
                    type: array
                    example:
                      [
                        {
                          prodId: prod-jespe,
                          title: Bryggkaffe,
                          desc: Bryggd på månadens bönor.,
                          price: 39,
                        },
                      ]

        "404":
          description: Failed to find menu
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Could not find any menu
        "400":
          $ref: "#/components/responses/TokenError"

    # ----- POST add new menu item -----
    post:
      tags:
        - Menu
      description: Adds a new item to menu
      requestBody:
        required: true
        content:
          application/json:
            $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Confirmation on adding new item
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Successfully added new menu item

  /api/menu/{prodId}:
    put:
      tags:
        - Menu
      description:
      responses:

    delete:
      tags:
        - Menu
      description:
      responses:

  # --------------- Auth ---------------
  /api/auth/logout:
    get:
      tags:
        - Auth
      description:
      responses:

  /api/auth/register:
    post:
      tags:
        - Auth
      description:
      responses:

  /api/auth/login:
    post:
      tags:
        - Auth
      description:
      responses:

  # --------------- Cart ---------------
  /api/cart:
    get:
      tags:
        - Cart
      description:
      responses:

    put:
      tags:
        - Cart
      description:
      responses:

  /api/cart/{cartId}:
    get:
      tags:
        - Cart
      description:
      responses:

  # --------------- Orders ---------------
  /api/orders:
    get:
      tags:
        - Orders
      description:
      responses:

    post:
      tags:
        - Orders
      description:
      responses:

  /api/orders/{userId}:
    get:
      tags:
        - Orders
      description:
      responses:
